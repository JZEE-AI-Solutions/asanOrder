generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]  @relation("BusinessOwnerOrders")
  tenant    Tenant?

  @@map("users")
}

model Tenant {
  id               String            @id @default(cuid())
  businessName     String
  contactPerson    String
  whatsappNumber   String
  businessType     String
  businessCode     String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  ownerId          String            @unique
  forms            Form[]
  orders           Order[]
  productLogs      ProductLog[]
  products         Product[]
  purchaseInvoices PurchaseInvoice[]
  purchaseItems    PurchaseItem[]
  returns          Return[]
  customers        Customer[]
  owner            User              @relation(fields: [ownerId], references: [id], onUpdate: NoAction)

  @@map("tenants")
}

model Form {
  id          String      @id @default(cuid())
  name        String
  description String?
  isPublished Boolean     @default(false)
  isHidden    Boolean     @default(false)
  formLink    String?     @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tenantId    String
  fields      FormField[]
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onUpdate: NoAction)
  orders      Order[]

  @@map("forms")
}

model FormField {
  id               String   @id @default(cuid())
  label            String
  fieldType        String
  isRequired       Boolean  @default(false)
  placeholder      String?
  options          String?
  order            Int
  createdAt        DateTime @default(now())
  formId           String
  selectedProducts String?  @db.NVarChar(MAX)
  form             Form     @relation(fields: [formId], references: [id], onUpdate: NoAction)

  @@map("form_fields")
}

model Order {
  id                 String   @id @default(cuid())
  orderNumber        String   @unique
  formData           String
  images             String?
  imagesData         Bytes?
  imagesType         String?
  paymentAmount      Float?
  paymentReceipt     String?
  paymentReceiptData Bytes?
  paymentReceiptType String?
  status             String   @default("PENDING")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  formId             String
  tenantId           String
  businessOwnerId    String?
  customerId         String?
  selectedProducts   String?  @db.NVarChar(MAX)
  productQuantities  String?  @db.NVarChar(MAX)
  businessOwner      User?    @relation("BusinessOwnerOrders", fields: [businessOwnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  form               Form     @relation(fields: [formId], references: [id], onUpdate: NoAction)
  tenant             Tenant   @relation(fields: [tenantId], references: [id], onUpdate: NoAction)
  customer           Customer? @relation(fields: [customerId], references: [id], onUpdate: NoAction)

  @@map("orders")
}

model PurchaseItem {
  id                String          @id @default(cuid())
  name              String
  description       String?
  purchasePrice     Float
  quantity          Int             @default(0)
  category          String?
  sku               String?
  image             String?
  imageData         Bytes?
  imageType         String?
  isDeleted         Boolean         @default(false)
  deletedAt         DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  tenantId          String
  purchaseInvoiceId String
  productId         String?
  productLogs       ProductLog[]
  product           Product?        @relation(fields: [productId], references: [id], onUpdate: NoAction)
  purchaseInvoice   PurchaseInvoice @relation(fields: [purchaseInvoiceId], references: [id], onUpdate: NoAction)
  tenant            Tenant          @relation(fields: [tenantId], references: [id], onUpdate: NoAction)

  @@map("purchase_items")
}

model Product {
  id                 String         @id @default(cuid())
  name               String
  description        String?
  category           String?
  sku                String?
  image              String?
  imageData          Bytes?
  imageType          String?
  isActive           Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  tenantId           String
  currentQuantity    Int            @default(0)
  currentRetailPrice Float?
  lastPurchasePrice  Float?
  lastUpdated        DateTime       @default(now())
  maxStockLevel      Int?
  minStockLevel      Int            @default(0)
  productLogs        ProductLog[]
  tenant             Tenant         @relation(fields: [tenantId], references: [id], onUpdate: NoAction)
  purchaseItems      PurchaseItem[]

  @@map("products")
}

model ProductLog {
  id             String        @id @default(cuid())
  action         String
  quantity       Int?
  oldQuantity    Int?
  newQuantity    Int?
  oldPrice       Float?
  newPrice       Float?
  reason         String?
  reference      String?
  notes          String?
  createdAt      DateTime      @default(now())
  tenantId       String
  productId      String?
  purchaseItemId String?
  product        Product?      @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  purchaseItem   PurchaseItem? @relation(fields: [purchaseItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onUpdate: NoAction)

  @@map("product_logs")
}

model PurchaseInvoice {
  id            String         @id @default(cuid())
  invoiceNumber String
  supplierName  String?
  invoiceDate   DateTime
  totalAmount   Float
  image         String?
  imageData     Bytes?
  imageType     String?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tenantId      String
  deleteReason  String?
  deletedAt     DateTime?
  deletedBy     String?
  isDeleted     Boolean        @default(false)
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onUpdate: NoAction)
  purchaseItems PurchaseItem[]
  returns       Return[]

  @@map("purchase_invoices")
}

model Return {
  id                String           @id @default(cuid())
  returnNumber      String
  reason            String?
  returnDate        DateTime
  totalAmount       Float
  status            String           @default("PENDING")
  notes             String?
  image             String?
  imageData         Bytes?
  imageType         String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  tenantId          String
  purchaseInvoiceId String?
  returnItems       ReturnItem[]
  purchaseInvoice   PurchaseInvoice? @relation(fields: [purchaseInvoiceId], references: [id], onUpdate: NoAction)
  tenant            Tenant           @relation(fields: [tenantId], references: [id], onUpdate: NoAction)

  @@map("returns")
}

model ReturnItem {
  id            String   @id @default(cuid())
  productName   String
  description   String?
  purchasePrice Float
  quantity      Int
  reason        String?
  sku           String?
  createdAt     DateTime @default(now())
  returnId      String
  return        Return   @relation(fields: [returnId], references: [id], onUpdate: NoAction)

  @@map("return_items")
}

model Customer {
  id                String        @id @default(cuid())
  phoneNumber       String
  name              String?
  email             String?
  address           String?
  city              String?
  state             String?
  country           String?
  postalCode        String?
  notes             String?
  isActive          Boolean       @default(true)
  totalOrders       Int           @default(0)
  totalSpent        Float         @default(0)
  lastOrderDate     DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  tenantId          String
  orders            Order[]
  customerLogs      CustomerLog[]
  tenant            Tenant        @relation(fields: [tenantId], references: [id], onUpdate: NoAction)

  @@unique([phoneNumber, tenantId])
  @@map("customers")
}

model CustomerLog {
  id          String   @id @default(cuid())
  action      String   // 'CREATED', 'UPDATED', 'ORDER_PLACED', 'INFO_CHANGED', etc.
  fieldName   String?  // Which field was changed (if applicable)
  oldValue    String?  // Previous value
  newValue    String?  // New value
  description String?  // Human-readable description
  metadata    String?  // Additional JSON data
  createdAt   DateTime @default(now())
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onUpdate: NoAction)

  @@map("customer_logs")
}
